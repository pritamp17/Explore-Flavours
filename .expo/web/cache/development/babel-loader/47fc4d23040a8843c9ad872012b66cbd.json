{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\n\nvar _templateObject, _templateObject2, _templateObject3;\n\nimport React, { useContext, useState } from \"react\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport styled from \"styled-components/native\";\nimport { ActivityIndicator, Colors } from \"react-native-paper\";\nimport { SafeArea } from \"../../../components/utility/safe-area.component\";\nimport { Spacer } from \"../../../components/spacer/spacer.component\";\nimport { FavouritesBar } from \"../../../components/favourites/favourites-bar.component\";\nimport { RestaurantsContext } from \"../../../services/restaurants/restaurants.context\";\nimport { FavouritesContext } from \"../../../services/favourites/favourites.context\";\nimport { Search } from \"../components/search.component\";\nimport { RestaurantInfoCard } from \"../components/restaurant-info-card.component\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar RestaurantList = styled(FlatList).attrs({\n  contentContainerStyle: {\n    padding: 16\n  }\n})(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\"])));\nvar Loading = styled(ActivityIndicator)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose([\"\\n  margin-left: -25px;\\n\"])));\nvar LoadingContainer = styled.View(_templateObject3 || (_templateObject3 = _taggedTemplateLiteralLoose([\"\\n  position: absolute;\\n  top: 50%;\\n  left: 50%;\\n\"])));\nexport var RestaurantsScreen = function RestaurantsScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useContext = useContext(RestaurantsContext),\n      isLoading = _useContext.isLoading,\n      restaurants = _useContext.restaurants;\n\n  var _useContext2 = useContext(FavouritesContext),\n      favourites = _useContext2.favourites;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isToggled = _useState2[0],\n      setIsToggled = _useState2[1];\n\n  return _jsxs(SafeArea, {\n    children: [isLoading && _jsx(LoadingContainer, {\n      children: _jsx(Loading, {\n        size: 50,\n        animating: true,\n        color: Colors.blue300\n      })\n    }), _jsx(Search, {\n      isFavouritesToggled: isToggled,\n      onFavouritesToggle: function onFavouritesToggle() {\n        return setIsToggled(!isToggled);\n      }\n    }), isToggled && _jsx(FavouritesBar, {\n      favourites: favourites,\n      onNavigate: navigation.navigate\n    }), _jsx(RestaurantList, {\n      data: restaurants,\n      renderItem: function renderItem(_ref2) {\n        var item = _ref2.item;\n        return _jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            return navigation.navigate(\"RestaurantDetail\", {\n              restaurant: item\n            });\n          },\n          children: _jsx(Spacer, {\n            position: \"bottom\",\n            size: \"large\",\n            children: _jsx(RestaurantInfoCard, {\n              restaurant: item\n            })\n          })\n        });\n      },\n      keyExtractor: function keyExtractor(item) {\n        return item.name;\n      }\n    })]\n  });\n};","map":{"version":3,"names":["React","useContext","useState","styled","ActivityIndicator","Colors","SafeArea","Spacer","FavouritesBar","RestaurantsContext","FavouritesContext","Search","RestaurantInfoCard","RestaurantList","FlatList","attrs","contentContainerStyle","padding","Loading","LoadingContainer","View","RestaurantsScreen","navigation","isLoading","restaurants","favourites","isToggled","setIsToggled","blue300","navigate","item","restaurant","name"],"sources":["E:/Final projects/react-native/MealsApp_/MealsApp/src/features/restaurants/screens/restaurants.screen.js"],"sourcesContent":["import React,{ useContext, useState } from \"react\";\r\nimport { FlatList,TouchableOpacity } from \"react-native\";\r\nimport styled from \"styled-components/native\";\r\nimport { ActivityIndicator, Colors } from \"react-native-paper\";\r\n\r\nimport { SafeArea } from \"../../../components/utility/safe-area.component\";\r\nimport { Spacer } from \"../../../components/spacer/spacer.component\";\r\nimport { FavouritesBar } from \"../../../components/favourites/favourites-bar.component\";\r\n\r\nimport { RestaurantsContext } from \"../../../services/restaurants/restaurants.context\";\r\nimport { FavouritesContext } from \"../../../services/favourites/favourites.context\";\r\n\r\nimport { Search } from \"../components/search.component\";\r\nimport { RestaurantInfoCard } from \"../components/restaurant-info-card.component\";\r\n\r\nconst RestaurantList = styled(FlatList).attrs({\r\n  contentContainerStyle: {\r\n    padding: 16,\r\n  },\r\n})``;\r\n\r\nconst Loading = styled(ActivityIndicator)`\r\n  margin-left: -25px;\r\n`;\r\nconst LoadingContainer = styled.View`\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n`;\r\n\r\nexport const RestaurantsScreen = ({ navigation }) => {\r\n  const { isLoading, restaurants } = useContext(RestaurantsContext);\r\n  const { favourites } = useContext(FavouritesContext);\r\n  const [isToggled, setIsToggled] = useState(false);\r\n  // console.log(restaurantContext)\r\n  return (\r\n    <SafeArea>\r\n     {isLoading && (\r\n        <LoadingContainer>\r\n          <Loading size={50} animating={true} color={Colors.blue300} />\r\n        </LoadingContainer>\r\n      )}\r\n\r\n      <Search\r\n        isFavouritesToggled={isToggled}\r\n        onFavouritesToggle={() => setIsToggled(!isToggled)}\r\n      />\r\n        {isToggled && (\r\n        <FavouritesBar favourites={favourites} onNavigate={navigation.navigate} />\r\n      )}\r\n      \r\n      <RestaurantList\r\n       data={restaurants}\r\n        renderItem={({ item }) => {\r\n          return (\r\n            <TouchableOpacity\r\n            onPress={() =>\r\n                navigation.navigate(\"RestaurantDetail\", {\r\n                  restaurant: item,\r\n                })\r\n              }\r\n             >\r\n              <Spacer position=\"bottom\" size=\"large\">\r\n                <RestaurantInfoCard restaurant={item} />\r\n              </Spacer>\r\n            </TouchableOpacity>\r\n          );\r\n        }}\r\n        keyExtractor={(item) => item.name}\r\n      />\r\n    </SafeArea>\r\n  );\r\n};\r\n"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,QAA3B,QAA2C,OAA3C;;;AAEA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,iBAAT,EAA4BC,MAA5B,QAA0C,oBAA1C;AAEA,SAASC,QAAT;AACA,SAASC,MAAT;AACA,SAASC,aAAT;AAEA,SAASC,kBAAT;AACA,SAASC,iBAAT;AAEA,SAASC,MAAT;AACA,SAASC,kBAAT;;;AAEA,IAAMC,cAAc,GAAGV,MAAM,CAACW,QAAD,CAAN,CAAiBC,KAAjB,CAAuB;EAC5CC,qBAAqB,EAAE;IACrBC,OAAO,EAAE;EADY;AADqB,CAAvB,CAAH,0EAApB;AAMA,IAAMC,OAAO,GAAGf,MAAM,CAACC,iBAAD,CAAT,qGAAb;AAGA,IAAMe,gBAAgB,GAAGhB,MAAM,CAACiB,IAAV,gIAAtB;AAMA,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,OAAoB;EAAA,IAAjBC,UAAiB,QAAjBA,UAAiB;;EACnD,kBAAmCrB,UAAU,CAACQ,kBAAD,CAA7C;EAAA,IAAQc,SAAR,eAAQA,SAAR;EAAA,IAAmBC,WAAnB,eAAmBA,WAAnB;;EACA,mBAAuBvB,UAAU,CAACS,iBAAD,CAAjC;EAAA,IAAQe,UAAR,gBAAQA,UAAR;;EACA,gBAAkCvB,QAAQ,CAAC,KAAD,CAA1C;EAAA;EAAA,IAAOwB,SAAP;EAAA,IAAkBC,YAAlB;;EAEA,OACE,MAAC,QAAD;IAAA,WACEJ,SAAS,IACP,KAAC,gBAAD;MAAA,UACE,KAAC,OAAD;QAAS,IAAI,EAAE,EAAf;QAAmB,SAAS,EAAE,IAA9B;QAAoC,KAAK,EAAElB,MAAM,CAACuB;MAAlD;IADF,EAFJ,EAOE,KAAC,MAAD;MACE,mBAAmB,EAAEF,SADvB;MAEE,kBAAkB,EAAE;QAAA,OAAMC,YAAY,CAAC,CAACD,SAAF,CAAlB;MAAA;IAFtB,EAPF,EAWKA,SAAS,IACV,KAAC,aAAD;MAAe,UAAU,EAAED,UAA3B;MAAuC,UAAU,EAAEH,UAAU,CAACO;IAA9D,EAZJ,EAeE,KAAC,cAAD;MACC,IAAI,EAAEL,WADP;MAEE,UAAU,EAAE,2BAAc;QAAA,IAAXM,IAAW,SAAXA,IAAW;QACxB,OACE,KAAC,gBAAD;UACA,OAAO,EAAE;YAAA,OACLR,UAAU,CAACO,QAAX,CAAoB,kBAApB,EAAwC;cACtCE,UAAU,EAAED;YAD0B,CAAxC,CADK;UAAA,CADT;UAAA,UAOE,KAAC,MAAD;YAAQ,QAAQ,EAAC,QAAjB;YAA0B,IAAI,EAAC,OAA/B;YAAA,UACE,KAAC,kBAAD;cAAoB,UAAU,EAAEA;YAAhC;UADF;QAPF,EADF;MAaD,CAhBH;MAiBE,YAAY,EAAE,sBAACA,IAAD;QAAA,OAAUA,IAAI,CAACE,IAAf;MAAA;IAjBhB,EAfF;EAAA,EADF;AAqCD,CA1CM"},"metadata":{},"sourceType":"module"}